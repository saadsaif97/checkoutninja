{%- for option in product.metafields.options -%}
  {% assign name = option[0] %}
  {% assign values = option[1] | remove: '[' | remove: ']' | remove: '"' | split: ","   %}
  <div class="product-form__input product-form__input--dropdown">
    <label class="form__label" for="option-{{ name }}">
      {{ name }}
    </label>
    <div class="select">
      <select
        id="option-{{ name }}"
        class="select__select"
        name="{{ name | escape }}"
      >
        {% for value in values %}
          <option value="{{ value }}">{{ value }}</option>
        {% endfor %}
      </select>
    </div>
  </div>
{%- endfor -%}

<script defer>
  (()=>{
  
    let selectedProduct = {};
  
    document.querySelectorAll("select[id^='option-']").forEach(option => {
      option.addEventListener('change', async (e) => {
        let selectedHandle = getSelectedHandle()
        await fetchProduct(selectedHandle)
        await renderTitle(selectedHandle)
        await renderPrice(selectedHandle)
        console.log({selectedHandle, selectedProduct})
      })
    })
    
    function getSelectedHandle() {
      return Array.from(document.querySelectorAll("select[id^='option-']")).map(option => option.value).join("_")
    }
    
    async function renderTitle(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-title`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        const htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-title').innerHTML;
        
        const querySelector = ".product__title"
        let titleContainer = document.querySelector(querySelector)
        if(!titleContainer) throw new Error(`Title container is not correct ${querySelector}`)
        titleContainer.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderPrice(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-price`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        const htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-price').innerHTML;
        
        const querySelector = "[id^='price']"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`Price container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }

    
    async function fetchProduct(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}.js`);
        let product = await response.json();
        selectedProduct = product;
      } catch (err) {
        console.error('error:' + err);
      }
    }

    
    function getProductIdFromHandle(selectedHandle) {
      let products = [
        {%- for product in collections[product.metafields.family.collection].products -%} 
          [ "{{ product.handle }}", {{ product.id }} ] {%- unless forloop.last -%},{%- endunless -%}
        {%- endfor -%}
      ];
      let foundHandle = products.find(([handle, id]) => handle == selectedHandle)
      if(!foundHandle) throw new Error(`Handle does not match: "${selectedHandle}"`)

      return foundHandle[1]
    }
  })()
</script>
