{%- assign uid = 'product_options' | append: product.id -%}
{%- assign selector_id = "#" | append: uid -%}
{%- assign family_collection = collections[product.metafields.family.collection] -%}
{%- assign product_options = family_collection.metafields.product.options -%}
{%- assign base_handle = family_collection.metafields.product.base_handle -%}

{% if product_options %}
<div class="product-selections">
  <p>Select Options</p>
  <form>
    <div id="{{ uid }}"></div>
  </form>
</div>

{{ 'starfiredirect.js' | asset_url | script_tag }}
<script defer>
  
  (()=>{
    const productOptions = {{ product_options }};
    if(!Object.keys(productOptions).length) return;
    
    const productOptionsInstance = new ProductOptions("{{ uid }}", productOptions);
    productOptionsInstance.renderAllOptions();
    
    
    window.addEventListener("product:selected", e => {
      const selected_options = e.detail
      updatePDPWithSelectedProductData(selected_options)
    })
    
    async function updatePDPWithSelectedProductData(selected_options) {
      const selectedHandle = getSelectedHandle(selected_options)
      productId = getProductIdFromHandle(selectedHandle)
      updateAddToCartId()
      await fetchProduct(selectedHandle)
      
      // DOM update start
      addLoader()
      updateUrl(selectedHandle)
      await renderTitle(selectedHandle)
      await renderPrice(selectedHandle)
      await renderGallery(selectedHandle)
      removeLoader()
      // DOM update end
      console.log({selectedHandle})
    }
    
    function updateAddToCartId() {
      document.querySelectorAll("form[action='/cart/add'] [name='id']").forEach(id => id.value = productId)
    }
    
    function addLoader() {
      document.querySelector("[id^='MainProduct']")?.classList.add('loader')
    }
    
    function removeLoader() {
      document.querySelector("[id^='MainProduct']")?.classList.remove('loader')
    }
    
    function updateUrl(selectedHandle) {
      history.pushState({}, null, `https://${window.Shopify.shop}/products/${selectedHandle}`)
    }
    
    function getSelectedHandle(selected_options) {
      return `{{ base_handle }}-${selected_options}`
    }
    
    async function renderTitle(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-title`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-title').innerHTML;
        
        let querySelector = ".product__title"
        let titleContainer = document.querySelector(querySelector)
        if(!titleContainer) throw new Error(`title container is not correct ${querySelector}`)
        titleContainer.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderPrice(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-price`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-price').innerHTML;
        
        let querySelector = "[id^='price']"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`price container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderGallery(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-gallery`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-gallery').innerHTML;
        
        // remove previous product media modal
        document.querySelector('product-modal')?.remove()
        
        let querySelector = ".product__media-wrapper"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`gallery container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup
      } catch (error) {
        throw error;
      }
    }
    
    async function renderProductMediaModal(product_handle) {
      try {
      
        let productId = getProductIdFromHandle(product_handle)
        let productModal = document.querySelector(`[id='ProductModal-template--${productId}__main']`)
        if(productModal) {
          console.log("productModal already available: ", productModal)
          return false
        }
      
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-media-modal`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-media-modal').innerHTML;
        document.body.insertAdjacentHTML('beforeend', htmlMarkup)
      } catch (error) {
        throw error;
      }
    }

    
    async function fetchProduct(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}.js`);
        let product = await response.json();
        selectedProduct = product;
      } catch (err) {
        console.error('error:' + err);
      }
    }

    
    function getProductIdFromHandle(selectedHandle) {
      {% paginate family_collection.products by 1000 %}
        let products = [
          {% for product in family_collection.products %}
            [ "{{ product.handle }}", {{ product.selected_or_first_available_variant.id }} ] {%- unless forloop.last -%},{%- endunless -%}
          {% endfor %}
        ];
      {% endpaginate %}
      
      let foundHandle = products.find(([handle, id]) => handle == selectedHandle)
      if(!foundHandle) throw new Error(`Handle does not match: "${selectedHandle}"`)

      return foundHandle[1]
    }
  })()

</script>

<script defer>
  const accordions = document.querySelectorAll("{{ selector_id }} .accordion");

  for (let accordion of accordions) {
    accordion.addEventListener("click", function(e) {
      
      /* remove the active class from other accordians */
      Array.from(accordions).filter(accordion => accordion.title !== e.target.title).forEach(accordion => {
        accordion.classList.remove("active")
        accordion.nextElementSibling.style.maxHeight = null
      })
    
      /* Toggle between adding and removing the "active" class */
      this.classList.toggle("active");

      /* Toggle between set maxHeight to null 
        and setting maxHeight to the scrollHeight value plus 'px' */

      let panel = this.nextElementSibling;
      panel.style.maxHeight = (panel.style.maxHeight) ? null : panel.scrollHeight + "px";
      
      setTimeout(() => {
        if(this.classList.contains("active")) {
          panel.style.maxHeight = panel.scrollHeight + "px";
        }
      }, 1000)
    });
  }
</script>

<style>
  /* Style the buttons that are used to open and close the accordion panel */
  .product-selections {
    margin-bottom: 20px;  
  }
  
  {{ selector_id }} {
    display: grid;
    gap: 10px;
  }
  
  {{ selector_id }} > div {
    border: 1px solid #ccc;
  }
  {{ selector_id }} .accordion {
    margin-top: 0;
    user-select: none;
    background-color: #eee;
    color: #444;
    cursor: pointer;
    padding: 18px;
    width: 100%;
    text-align: left;
    border: none;
    outline: none;
    transition: 0.4s;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  {{ selector_id }} .accordion svg {
    width: 12px;
    height: 12px;
    transition: all .1s ease-in;
  }
  {{ selector_id }} .accordion.active svg {
    transform: rotate(180deg);
  }
  /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
  {{ selector_id }} .active, .accordion:hover {
    background-color: #ccc;
  }
  /* Style the accordion panel. Note: hidden by default */
  {{ selector_id }} .panel {
    padding: 0;
    max-height: 0;
    overflow: hidden;
    border: none;
    transition: all 0.2s ease-out;
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
  }
  
  {{ selector_id }} .accordion.active + .panel {
    padding: 18px;
  }
  
  {{ selector_id }} fieldset legend {
    display: none;
  }
  {{ selector_id }} fieldset label input {
    display: none;
  }
  {{ selector_id }} fieldset label {
    max-width: 80px;
    min-height: 96px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding: 5px;
    position: relative;
  }
  {{ selector_id }} fieldset label .highlightSelected {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background-color: #e9e9e9;
    display: none;
  }
  {{ selector_id }} fieldset label > input[type="radio"]:checked ~ .highlightSelected {
    display: block;
  }
  {{ selector_id }} fieldset label > input[type="radio"]:checked ~ .title {
    font-weight: bold;
  }
  {{ selector_id }} fieldset label img {
    width: 100%;
  }
  {{ selector_id }} fieldset label > * {
    margin: 0;
    padding: 0;
    line-height: 1.1;
    text-align: center;
  }
  {{ selector_id }} .loader {
    position: relative;
    opacity: 0.8;
    transition: opacity 0.3s;
    cursor: not-allowed;
    pointer-events: none;
  }
  {{ selector_id }} .loader:after,
  {{ selector_id }} .loader:before {
    content: '';
    position: absolute;
    width: 100px;
    height: 3px;
    background: #ffffff;
    left: 50%;
    top: 30%;
    margin: -1px 0 0 -50px;
    z-index: 4;
    opacity: 0;
  }
  {{ selector_id }} .loader:before {
    background: #444444;
    opacity: 1;
  }
  {{ selector_id }} .loader:after {
    opacity: 0;
    animation: preloading 0.5s ease 0.3s infinite;
  }

  @keyframes preloading {
    0% {
      transform-origin: 0 50%;
      transform: scaleX(0);
      opacity: 0;
    }
    40% {
      transform-origin: 0 50%;
      transform: scaleX(1);
      opacity: 1;
    }
    41% {
      transform-origin: 100% 50%;
      transform: scaleX(1);
      opacity: 1;
    }
    to {
      transform-origin: 100% 50%;
      transform: scaleX(0);
      opacity: 1;
    }
  }
</style>
{% endif %}
