<pre>
  {{ product.metafields.variant.options }}
  {{ product.metafields.variant.options.first }}
</pre>

{%- assign uid = 'product_' | append: product.id -%}

<div id="{{ uid }}"></div>

<script defer>
  (()=>{
    let productOptions = [];
    productOptions = {{ product.metafields.variant.options }};
    console.log({productOptions})
    
    // Sort options based on frontend sorting order
    entries = Object.entries(productOptions).sort((a, b) => a[1].frontend_sorting - b[1].frontend_sorting);
    // Convert the sorted array back to an object
    const sortedProductOptions = Object.fromEntries(entries);
    
    // Render each option as a div structure
    for (const category in sortedProductOptions) {
      renderOptionDiv(category);
    }
    
    // Function to slugify a string
    function slugify(text) {
      return text.toLowerCase().replace(/ /g, "-");
    }
    
    function renderOptionDiv(category) {
      const productOptionsDiv = document.getElementById("{{ uid }}");

      const div = document.createElement("div");
      div.className = "product-form__input product-form__input--dropdown";

      const label = document.createElement("label");
      label.className = "form__label";
      label.setAttribute("for", `option-${slugify(category)}`);
      label.textContent = category;

      const selectDiv = document.createElement("div");
      selectDiv.className = "select";

      const select = document.createElement("select");
      select.id = `option-${slugify(category)}`;
      select.className = "select__select";
      select.name = category; // You may need to escape the option name if needed

      productOptions[category].options.forEach(value => {
        const optionElement = document.createElement("option");
        optionElement.value = value;
        optionElement.textContent = value;
        select.appendChild(optionElement);
      });

      selectDiv.appendChild(select);
      div.appendChild(label);
      div.appendChild(selectDiv);
      productOptionsDiv.appendChild(div);
    }
    
    
    return
    
    // Function to render each category dropdown
    function renderCategoryDropdown() {
      const productOptionsDiv = document.getElementById("{{ uid }}");

      // Sort categories based on frontend sorting order
      const sortedCategories = Object.keys(productOptions).sort((a, b) => {
        return productOptions[a].frontend_sorting - productOptions[b].frontend_sorting;
      });

      sortedCategories.forEach(category => {
        const select = document.createElement("select");

        // Sort options based on frontend sorting order
        const sortedOptions = productOptions[category].options.sort((a, b) => {
          return productOptions[category].frontend_sorting[a] - productOptions[category].frontend_sorting[b];
        });

        sortedOptions.forEach(option => {
          const optionElement = document.createElement("option");
          optionElement.value = slugify(option);
          optionElement.text = option;
          select.appendChild(optionElement);
        });

        productOptionsDiv.appendChild(select);
      });
    }

    // Render each category dropdown
    renderCategoryDropdown();
    
    return
    
    // check if the product metafields are available or not
    const product_options_available = Object.keys({{ product.metafields.options | json }}).length
    if(!product_options_available) return
  
    let selectedProduct = {};
    let productId = {{ product.id }}
    
    init()
  
    function init() {
      document.querySelectorAll("select[id^='option-']").forEach(option => {
        option.addEventListener('change', async (e) => {
          updatePDPWithSelectProductData()
        })
      })
      
      updatePDPWithSelectProductData() 
    }
    
    async function updatePDPWithSelectProductData() {
      let selectedHandle = getSelectedHandle()
      productId = getProductIdFromHandle(selectedHandle)
      updateAddToCartId()
      await fetchProduct(selectedHandle)
      
      // DOM update start
      addLoader()
      updateUrl(selectedHandle)
      await renderTitle(selectedHandle)
      await renderPrice(selectedHandle)
      await renderGallery(selectedHandle)
      removeLoader()
      // DOM update end
      console.log({selectedHandle, selectedProduct})
    }
    
    function updateAddToCartId() {
      document.querySelectorAll("form[action='/cart/add'] [name='id']").forEach(id => id.value = productId)
    }
    
    function addLoader() {
      document.querySelector("[id^='MainProduct']")?.classList.add('loader')
    }
    
    function removeLoader() {
      document.querySelector("[id^='MainProduct']")?.classList.remove('loader')
    }
    
    function updateUrl(selectedHandle) {
      history.pushState({}, null, `https://${window.Shopify.shop}/products/${selectedHandle}`)
    }
    
    function getSelectedHandle() {
      return Array.from(document.querySelectorAll("select[id^='option-']")).map(option => option.value).join("_")
    }
    
    async function renderTitle(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-title`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-title').innerHTML;
        
        let querySelector = ".product__title"
        let titleContainer = document.querySelector(querySelector)
        if(!titleContainer) throw new Error(`title container is not correct ${querySelector}`)
        titleContainer.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderPrice(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-price`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-price').innerHTML;
        
        let querySelector = "[id^='price']"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`price container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderGallery(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-gallery`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-gallery').innerHTML;
        
        // remove previous product media modal
        document.querySelector('product-modal')?.remove()
        
        let querySelector = ".product__media-wrapper"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`gallery container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup
      } catch (error) {
        throw error;
      }
    }
    
    async function renderProductMediaModal(product_handle) {
      try {
      
        let productId = getProductIdFromHandle(product_handle)
        let productModal = document.querySelector(`[id='ProductModal-template--${productId}__main']`)
        if(productModal) {
          console.log("productModal already available: ", productModal)
          return false
        }
      
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-media-modal`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-media-modal').innerHTML;
        document.body.insertAdjacentHTML('beforeend', htmlMarkup)
      } catch (error) {
        throw error;
      }
    }

    
    async function fetchProduct(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}.js`);
        let product = await response.json();
        selectedProduct = product;
      } catch (err) {
        console.error('error:' + err);
      }
    }

    
    function getProductIdFromHandle(selectedHandle) {
      let products = [
        {%- for product in collections[product.metafields.family.collection].products -%} 
          [ "{{ product.handle }}", {{ product.selected_or_first_available_variant.id }} ] {%- unless forloop.last -%},{%- endunless -%}
        {%- endfor -%}
      ];
      let foundHandle = products.find(([handle, id]) => handle == selectedHandle)
      if(!foundHandle) throw new Error(`Handle does not match: "${selectedHandle}"`)

      return foundHandle[1]
    }
  })()
</script>

<style>
  .loader {
    position: relative;
    opacity: .8;
    transition: opacity .3s;
    cursor: not-allowed;
    pointer-events: none;
  }
  .loader:after, .loader:before {
    content: "";
    position: absolute;
    width: 100px;
    height: 3px;
    background: #ffffff;
    left: 50%;
    top: 30%;
    margin: -1px 0 0 -50px;
    z-index: 4;
    opacity: 0;
  }
  .loader:before {
    background: #444444;
    opacity: 1;
  }
  .loader:after {
    opacity: 0;
    animation: preloading .5s ease .3s infinite;
  }
  
  @keyframes preloading {
    0% {
      transform-origin: 0 50%;
      transform: scaleX(0);
      opacity: 0;
    }
    40% {
      transform-origin: 0 50%;
      transform: scaleX(1);
      opacity: 1;
    }
    41% {
      transform-origin: 100% 50%;
      transform: scaleX(1);
      opacity: 1;
    }
    to {
      transform-origin: 100% 50%;
      transform: scaleX(0);
      opacity: 1;
    }
  }

</style>
