{%- assign uid = 'product_options' | append: product.id -%}
{%- assign product_options = product.metafields.variant.options -%}

{% if product_options %}
<div id="{{ uid }}"></div>

{{ 'starfiredirect.js' | asset_url | script_tag }}
<script defer>
  
  (()=>{
    const productOptions = {{ product_options }};
    if(!Object.keys(productOptions).length) return;
    
    const productOptionsInstance = new ProductOptions("{{ uid }}", productOptions);
    productOptionsInstance.renderAllOptions();
    
    
    addEventListeners()
  
    function addEventListeners() {
      document.querySelectorAll("#{{ uid }} select[id^='option-']").forEach(option => {
        option.addEventListener('change', async (e) => {
          updatePDPWithSelectProductData()
        })
      })
      
      //updatePDPWithSelectProductData() 
    }
    
    async function updatePDPWithSelectProductData() {
      let selectedHandle = getSelectedHandle()
      //productId = getProductIdFromHandle(selectedHandle)
      //updateAddToCartId()
      //await fetchProduct(selectedHandle)
      //
      //// DOM update start
      //addLoader()
      //updateUrl(selectedHandle)
      //await renderTitle(selectedHandle)
      //await renderPrice(selectedHandle)
      //await renderGallery(selectedHandle)
      //removeLoader()
      // DOM update end
      console.log({selectedHandle})
    }
    
    function updateAddToCartId() {
      document.querySelectorAll("form[action='/cart/add'] [name='id']").forEach(id => id.value = productId)
    }
    
    function addLoader() {
      document.querySelector("[id^='MainProduct']")?.classList.add('loader')
    }
    
    function removeLoader() {
      document.querySelector("[id^='MainProduct']")?.classList.remove('loader')
    }
    
    function updateUrl(selectedHandle) {
      history.pushState({}, null, `https://${window.Shopify.shop}/products/${selectedHandle}`)
    }
    
    function getSelectedHandle() {
      return Array.from(document.querySelectorAll("#{{ uid }} select[id^='option-']")).map(option => option.value).join("-")
    }
    
    async function renderTitle(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-title`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-title').innerHTML;
        
        let querySelector = ".product__title"
        let titleContainer = document.querySelector(querySelector)
        if(!titleContainer) throw new Error(`title container is not correct ${querySelector}`)
        titleContainer.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderPrice(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-price`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-price').innerHTML;
        
        let querySelector = "[id^='price']"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`price container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup

      } catch (error) {
        throw error;
      }
    }
    
    async function renderGallery(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-gallery`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-gallery').innerHTML;
        
        // remove previous product media modal
        document.querySelector('product-modal')?.remove()
        
        let querySelector = ".product__media-wrapper"
        let container = document.querySelector(querySelector)
        if(!container) throw new Error(`gallery container is not correct ${querySelector}`)
        container.innerHTML = htmlMarkup
      } catch (error) {
        throw error;
      }
    }
    
    async function renderProductMediaModal(product_handle) {
      try {
      
        let productId = getProductIdFromHandle(product_handle)
        let productModal = document.querySelector(`[id='ProductModal-template--${productId}__main']`)
        if(productModal) {
          console.log("productModal already available: ", productModal)
          return false
        }
      
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}?section_id=product-media-modal`);

        if (!response.ok) throw new Error(response.status);

        let text = await response.text();
        let htmlMarkup = new DOMParser().parseFromString(text, 'text/html').querySelector('#shopify-section-product-media-modal').innerHTML;
        document.body.insertAdjacentHTML('beforeend', htmlMarkup)
      } catch (error) {
        throw error;
      }
    }

    
    async function fetchProduct(product_handle) {
      try {
        let response = await fetch(`https://${window.Shopify.shop}/products/${product_handle}.js`);
        let product = await response.json();
        selectedProduct = product;
      } catch (err) {
        console.error('error:' + err);
      }
    }

    
    function getProductIdFromHandle(selectedHandle) {
      let products = [
        {%- for product in collections[product.metafields.family.collection].products -%} 
          [ "{{ product.handle }}", {{ product.selected_or_first_available_variant.id }} ] {%- unless forloop.last -%},{%- endunless -%}
        {%- endfor -%}
      ];
      let foundHandle = products.find(([handle, id]) => handle == selectedHandle)
      if(!foundHandle) throw new Error(`Handle does not match: "${selectedHandle}"`)

      return foundHandle[1]
    }
  })()

</script>

<style>
  .loader {
    position: relative;
    opacity: 0.8;
    transition: opacity 0.3s;
    cursor: not-allowed;
    pointer-events: none;
  }
  .loader:after,
  .loader:before {
    content: '';
    position: absolute;
    width: 100px;
    height: 3px;
    background: #ffffff;
    left: 50%;
    top: 30%;
    margin: -1px 0 0 -50px;
    z-index: 4;
    opacity: 0;
  }
  .loader:before {
    background: #444444;
    opacity: 1;
  }
  .loader:after {
    opacity: 0;
    animation: preloading 0.5s ease 0.3s infinite;
  }

  @keyframes preloading {
    0% {
      transform-origin: 0 50%;
      transform: scaleX(0);
      opacity: 0;
    }
    40% {
      transform-origin: 0 50%;
      transform: scaleX(1);
      opacity: 1;
    }
    41% {
      transform-origin: 100% 50%;
      transform: scaleX(1);
      opacity: 1;
    }
    to {
      transform-origin: 100% 50%;
      transform: scaleX(0);
      opacity: 1;
    }
  }
</style>
{% endif %}
